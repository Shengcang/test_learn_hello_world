/* 类         对象
电子计算机    计算机A
电子计算机    计算机B 
类的属性：用来保存对象的特征
类的方法：在某个事件发生时，激活该对象具备的某个方法，实现特定的功能
派生和继承：类往下接着细分类，父类、子类，派生类自动获得基类的所有属性和方法，也可以继续添加
多态性：同一个类的对象，对不同的对象表现出的不同的行为
封装：信息隐藏，公开外界需要直接操作的属性和行为，隐藏其它属性和行为  */

/*类的声明
[类修饰符]class 类名[:基类类名]
{类的成员;}
修饰符：
new：新建类，只能在嵌套类中表示类声明时使用，表明类中隐藏了由基类中继承而来的、与基类中同名的成员
public：共有类，外界可以不受限制访问
protected：保护类，该类或从该类派生的类可以访问
internal：内部类，本程序的类可以访问
private：私有类，表示只有该类才能访问  （默认为private类）
abstract：抽象类，说明该类不完整，只有声明没有具体的实现，只能做其他类的基类，而不能单独使用
sealed：密封类，该类不能作为其他类的基类，不能再派生新的类*/

/*类的成员
常量、变量、方法、属性、事件、索引器、运算符、构造函数、析构函数
类成员的访问修饰符：
public：允许类的内部或外界直接访问
private：只允许类内部访问，不允许外界访问，也不允许派生类访问  （默认为private类）
protected：不允许外界访问，但允许这个类的派生类访问
internal：允许同一个命名空间中的类访问
readonly：该成员的值只能读，不能写。只能赋予初始值
员
//静态成员：在前面加static，只能用类访问。类.静态成员名
//非静态成员（实例成员）：默认为非静态成员，只能用类的实例访问

//声明对象，创建类的实例
class Vehicle
{
 string color;
 int price;
 public void setcolor(string newcolor)
 {color=newcolor;}
 public string getcolor()
 {return color;}
 }
Vehicle veh=new Vehicle();
Vehicle.color=Vehicle.stecolor(blue);
Console.WriteLine(Vehicle.getcolor())
